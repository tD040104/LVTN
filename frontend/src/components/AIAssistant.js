import React, { useState } from 'react';
import './AIAssistant.css';

const AIAssistant = ({ subject, onClose }) => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'ai',
      content: `Xin ch√†o! T√¥i l√† AI tr·ª£ gi·∫£ng cho m√¥n ${subject.name}. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Gi·∫£i th√≠ch c√°c kh√°i ni·ªám kh√≥ hi·ªÉu\n‚Ä¢ T√≥m t·∫Øt b√†i h·ªçc\n‚Ä¢ G·ª£i √Ω b√†i t·∫≠p ph√π h·ª£p\n‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n\n\nH√£y ƒë·∫∑t c√¢u h·ªèi b·∫•t k·ª≥ n√†o b·∫°n mu·ªën!`,
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(inputMessage, subject);
      const aiMessage = {
        id: Date.now() + 1,
        type: 'ai',
        content: aiResponse,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (question, subject) => {
    const responses = {
      'to√°n h·ªçc': [
        "ƒê√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t hay v·ªÅ to√°n h·ªçc! ƒê·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y, ch√∫ng ta c·∫ßn √°p d·ª•ng c√°c c√¥ng th·ª©c v√† ph∆∞∆°ng ph√°p ph√π h·ª£p...",
        "T√¥i hi·ªÉu b·∫°n ƒëang g·∫∑p kh√≥ khƒÉn v·ªõi ph·∫ßn n√†y. H√£y ƒë·ªÉ t√¥i gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc m·ªôt c√°ch chi ti·∫øt...",
        "ƒê√¢y l√† m·ªôt kh√°i ni·ªám quan tr·ªçng trong to√°n h·ªçc. T√¥i s·∫Ω t√≥m t·∫Øt l·∫°i v√† ƒë∆∞a ra v√≠ d·ª• minh h·ªça..."
      ],
      'v·∫≠t l√Ω': [
        "C√¢u h·ªèi n√†y li√™n quan ƒë·∫øn c√°c ƒë·ªãnh lu·∫≠t v·∫≠t l√Ω c∆° b·∫£n. H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch v√† gi·∫£i th√≠ch...",
        "ƒê√¢y l√† m·ªôt hi·ªán t∆∞·ª£ng v·∫≠t l√Ω th√∫ v·ªã! T√¥i s·∫Ω gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ nguy√™n l√Ω ho·∫°t ƒë·ªông...",
        "ƒê·ªÉ hi·ªÉu ƒë∆∞·ª£c v·∫•n ƒë·ªÅ n√†y, ch√∫ng ta c·∫ßn n·∫Øm v·ªØng c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ l·ª±c v√† chuy·ªÉn ƒë·ªông..."
      ],
      'h√≥a h·ªçc': [
        "ƒê√¢y l√† m·ªôt ph·∫£n ·ª©ng h√≥a h·ªçc quan tr·ªçng. T√¥i s·∫Ω gi·∫£i th√≠ch c∆° ch·∫ø v√† c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng...",
        "C√¢u h·ªèi n√†y li√™n quan ƒë·∫øn c·∫•u tr√∫c ph√¢n t·ª≠. H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch chi ti·∫øt...",
        "ƒê·ªÉ hi·ªÉu ƒë∆∞·ª£c v·∫•n ƒë·ªÅ n√†y, ch√∫ng ta c·∫ßn n·∫Øm v·ªØng c√°c nguy√™n t·∫Øc c∆° b·∫£n c·ªßa h√≥a h·ªçc..."
      ],
      'sinh h·ªçc': [
        "ƒê√¢y l√† m·ªôt qu√° tr√¨nh sinh h·ªçc ph·ª©c t·∫°p. T√¥i s·∫Ω gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc m·ªôt c√°ch d·ªÖ hi·ªÉu...",
        "C√¢u h·ªèi n√†y li√™n quan ƒë·∫øn c·∫•u tr√∫c t·∫ø b√†o. H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch chi ti·∫øt...",
        "ƒê·ªÉ hi·ªÉu ƒë∆∞·ª£c v·∫•n ƒë·ªÅ n√†y, ch√∫ng ta c·∫ßn n·∫Øm v·ªØng c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ di truy·ªÅn h·ªçc..."
      ]
    };

    const subjectKey = subject.name.toLowerCase();
    const possibleResponses = responses[subjectKey] || responses['to√°n h·ªçc'];
    return possibleResponses[Math.floor(Math.random() * possibleResponses.length)];
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="ai-assistant">
      <div className="ai-header">
        <div className="ai-info">
          <div className="ai-avatar">ü§ñ</div>
          <div>
            <h3>AI Tr·ª£ gi·∫£ng - {subject.name}</h3>
            <p>ƒêang ho·∫°t ƒë·ªông</p>
          </div>
        </div>
        <button className="close-btn" onClick={onClose}>√ó</button>
      </div>

      <div className="ai-messages">
        {messages.map((message) => (
          <div key={message.id} className={`message ${message.type}`}>
            <div className="message-content">
              {message.content.split('\n').map((line, index) => (
                <p key={index}>{line}</p>
              ))}
            </div>
            <div className="message-time">
              {message.timestamp.toLocaleTimeString()}
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="message ai">
            <div className="message-content">
              <div className="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="ai-input">
        <textarea
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="ƒê·∫∑t c√¢u h·ªèi c·ªßa b·∫°n..."
          rows="3"
        />
        <button 
          onClick={handleSendMessage}
          disabled={!inputMessage.trim() || isTyping}
          className="send-btn"
        >
          G·ª≠i
        </button>
      </div>
    </div>
  );
};

export default AIAssistant;
