import React, { useState } from 'react';
import './Settings.css';

const Settings = ({ user, onClose, onUpdateUser }) => {
  const [activeTab, setActiveTab] = useState('profile');
  const [formData, setFormData] = useState({
    name: user.name,
    email: user.email,
    avatar: user.avatar,
    level: user.level,
    notifications: {
      email: true,
      push: true,
      studyReminder: true,
      achievement: true
    },
    preferences: {
      theme: 'light',
      language: 'vi',
      aiAssistant: true,
      autoSave: true,
      showProgress: true
    },
    privacy: {
      showProfile: true,
      showProgress: true,
      allowMessages: true
    }
  });

  const tabs = [
    { id: 'profile', name: 'H·ªì s∆°', icon: 'üë§' },
    { id: 'notifications', name: 'Th√¥ng b√°o', icon: 'üîî' },
    { id: 'preferences', name: 'T√πy ch·ªçn', icon: '‚öôÔ∏è' },
    { id: 'privacy', name: 'Quy·ªÅn ri√™ng t∆∞', icon: 'üîí' },
    { id: 'about', name: 'Gi·ªõi thi·ªáu', icon: '‚ÑπÔ∏è' }
  ];

  const avatars = ['üë®‚Äçüéì', 'üë©‚Äçüéì', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üßë‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüî¨', 'ü§ñ', 'üëæ', 'üé≠'];

  const themes = [
    { id: 'light', name: 'S√°ng', preview: '#ffffff' },
    { id: 'dark', name: 'T·ªëi', preview: '#1a1a1a' },
    { id: 'blue', name: 'Xanh d∆∞∆°ng', preview: '#e3f2fd' },
    { id: 'green', name: 'Xanh l√°', preview: '#e8f5e8' }
  ];

  const languages = [
    { id: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },
    { id: 'en', name: 'English', flag: 'üá∫üá∏' },
    { id: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { id: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' }
  ];

  const handleInputChange = (section, field, value) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleSave = () => {
    onUpdateUser(formData);
    onClose();
  };

  const handleReset = () => {
    setFormData({
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      level: user.level,
      notifications: {
        email: true,
        push: true,
        studyReminder: true,
        achievement: true
      },
      preferences: {
        theme: 'light',
        language: 'vi',
        aiAssistant: true,
        autoSave: true,
        showProgress: true
      },
      privacy: {
        showProfile: true,
        showProgress: true,
        allowMessages: true
      }
    });
  };

  const renderProfileTab = () => (
    <div className="settings-content">
      <h3>Th√¥ng tin c√° nh√¢n</h3>
      
      <div className="form-group">
        <label>Avatar</label>
        <div className="avatar-selection">
          {avatars.map(avatar => (
            <button
              key={avatar}
              className={`avatar-option ${formData.avatar === avatar ? 'selected' : ''}`}
              onClick={() => setFormData(prev => ({ ...prev, avatar }))}
            >
              {avatar}
            </button>
          ))}
        </div>
      </div>

      <div className="form-group">
        <label>T√™n</label>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          className="form-input"
        />
      </div>

      <div className="form-group">
        <label>Email</label>
        <input
          type="email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          className="form-input"
        />
      </div>

      <div className="form-group">
        <label>C·∫•p ƒë·ªô</label>
        <select
          value={formData.level}
          onChange={(e) => setFormData(prev => ({ ...prev, level: e.target.value }))}
          className="form-select"
        >
          <option value="Sinh vi√™n">Sinh vi√™n</option>
          <option value="H·ªçc sinh">H·ªçc sinh</option>
          <option value="Gi√°o vi√™n">Gi√°o vi√™n</option>
          <option value="Nghi√™n c·ª©u sinh">Nghi√™n c·ª©u sinh</option>
        </select>
      </div>
    </div>
  );

  const renderNotificationsTab = () => (
    <div className="settings-content">
      <h3>C√†i ƒë·∫∑t th√¥ng b√°o</h3>
      
      <div className="toggle-group">
        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Email th√¥ng b√°o</h4>
            <p>Nh·∫≠n th√¥ng b√°o qua email</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.notifications.email}
              onChange={(e) => handleInputChange('notifications', 'email', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Th√¥ng b√°o ƒë·∫©y</h4>
            <p>Nh·∫≠n th√¥ng b√°o tr√™n thi·∫øt b·ªã</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.notifications.push}
              onChange={(e) => handleInputChange('notifications', 'push', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Nh·∫Øc nh·ªü h·ªçc t·∫≠p</h4>
            <p>Nh·∫Øc nh·ªü th·ªùi gian h·ªçc t·∫≠p h√†ng ng√†y</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.notifications.studyReminder}
              onChange={(e) => handleInputChange('notifications', 'studyReminder', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Th√¥ng b√°o th√†nh t√≠ch</h4>
            <p>Th√¥ng b√°o khi ƒë·∫°t th√†nh t√≠ch m·ªõi</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.notifications.achievement}
              onChange={(e) => handleInputChange('notifications', 'achievement', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>
      </div>
    </div>
  );

  const renderPreferencesTab = () => (
    <div className="settings-content">
      <h3>T√πy ch·ªçn giao di·ªán</h3>
      
      <div className="form-group">
        <label>Ch·ªß ƒë·ªÅ</label>
        <div className="theme-selection">
          {themes.map(theme => (
            <button
              key={theme.id}
              className={`theme-option ${formData.preferences.theme === theme.id ? 'selected' : ''}`}
              onClick={() => handleInputChange('preferences', 'theme', theme.id)}
            >
              <div 
                className="theme-preview" 
                style={{ backgroundColor: theme.preview }}
              ></div>
              <span>{theme.name}</span>
            </button>
          ))}
        </div>
      </div>

      <div className="form-group">
        <label>Ng√¥n ng·ªØ</label>
        <div className="language-selection">
          {languages.map(lang => (
            <button
              key={lang.id}
              className={`language-option ${formData.preferences.language === lang.id ? 'selected' : ''}`}
              onClick={() => handleInputChange('preferences', 'language', lang.id)}
            >
              <span className="flag">{lang.flag}</span>
              <span>{lang.name}</span>
            </button>
          ))}
        </div>
      </div>

      <div className="toggle-group">
        <div className="toggle-item">
          <div className="toggle-info">
            <h4>AI Tr·ª£ gi·∫£ng</h4>
            <p>B·∫≠t/t·∫Øt AI tr·ª£ gi·∫£ng</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.preferences.aiAssistant}
              onChange={(e) => handleInputChange('preferences', 'aiAssistant', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>T·ª± ƒë·ªông l∆∞u</h4>
            <p>T·ª± ƒë·ªông l∆∞u ti·∫øn ƒë·ªô h·ªçc t·∫≠p</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.preferences.autoSave}
              onChange={(e) => handleInputChange('preferences', 'autoSave', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Hi·ªÉn th·ªã ti·∫øn ƒë·ªô</h4>
            <p>Hi·ªÉn th·ªã thanh ti·∫øn ƒë·ªô tr√™n giao di·ªán</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.preferences.showProgress}
              onChange={(e) => handleInputChange('preferences', 'showProgress', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>
      </div>
    </div>
  );

  const renderPrivacyTab = () => (
    <div className="settings-content">
      <h3>C√†i ƒë·∫∑t quy·ªÅn ri√™ng t∆∞</h3>
      
      <div className="toggle-group">
        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Hi·ªÉn th·ªã h·ªì s∆°</h4>
            <p>Cho ph√©p ng∆∞·ªùi kh√°c xem h·ªì s∆° c·ªßa b·∫°n</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.privacy.showProfile}
              onChange={(e) => handleInputChange('privacy', 'showProfile', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Hi·ªÉn th·ªã ti·∫øn ƒë·ªô</h4>
            <p>Cho ph√©p ng∆∞·ªùi kh√°c xem ti·∫øn ƒë·ªô h·ªçc t·∫≠p</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.privacy.showProgress}
              onChange={(e) => handleInputChange('privacy', 'showProgress', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="toggle-item">
          <div className="toggle-info">
            <h4>Cho ph√©p tin nh·∫Øn</h4>
            <p>Cho ph√©p ng∆∞·ªùi kh√°c g·ª≠i tin nh·∫Øn cho b·∫°n</p>
          </div>
          <label className="toggle-switch">
            <input
              type="checkbox"
              checked={formData.privacy.allowMessages}
              onChange={(e) => handleInputChange('privacy', 'allowMessages', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>
      </div>
    </div>
  );

  const renderAboutTab = () => (
    <div className="settings-content">
      <h3>Gi·ªõi thi·ªáu ·ª©ng d·ª•ng</h3>
      
      <div className="about-info">
        <div className="app-logo">
          <span className="logo-icon">üéì</span>
          <h4>AI Study Assistant</h4>
        </div>
        
        <div className="app-details">
          <p><strong>Phi√™n b·∫£n:</strong> 1.0.0</p>
          <p><strong>Ph√°t tri·ªÉn b·ªüi:</strong> AI Study Team</p>
          <p><strong>Ng√†y ph√°t h√†nh:</strong> 2024</p>
          <p><strong>M√¥ t·∫£:</strong> ·ª®ng d·ª•ng h·ªçc t·∫≠p th√¥ng minh v·ªõi AI tr·ª£ gi·∫£ng</p>
        </div>

        <div className="features-list">
          <h4>T√≠nh nƒÉng ch√≠nh:</h4>
          <ul>
            <li>ü§ñ AI Tr·ª£ gi·∫£ng th√¥ng minh</li>
            <li>üìù H·ªá th·ªëng ki·ªÉm tra tr·∫Øc nghi·ªám</li>
            <li>üìä Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p</li>
            <li>üèÜ H·ªá th·ªëng th√†nh t√≠ch v√† huy hi·ªáu</li>
            <li>üîç T√¨m ki·∫øm v√† l·ªçc n·ªôi dung</li>
            <li>‚öôÔ∏è T√πy ch·ªânh giao di·ªán</li>
          </ul>
        </div>

        <div className="contact-info">
          <h4>Li√™n h·ªá h·ªó tr·ª£:</h4>
          <p>üìß Email: support@aistudy.com</p>
          <p>üìû Hotline: 1900-1234</p>
          <p>üåê Website: www.aistudy.com</p>
        </div>
      </div>
    </div>
  );

  return (
    <div className="settings-overlay">
      <div className="settings-container">
        <div className="settings-header">
          <h2>‚öôÔ∏è C√†i ƒë·∫∑t</h2>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>

        <div className="settings-body">
          <div className="settings-sidebar">
            <nav className="settings-nav">
              {tabs.map(tab => (
                <button
                  key={tab.id}
                  className={`nav-item ${activeTab === tab.id ? 'active' : ''}`}
                  onClick={() => setActiveTab(tab.id)}
                >
                  <span className="nav-icon">{tab.icon}</span>
                  <span>{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>

          <div className="settings-main">
            {activeTab === 'profile' && renderProfileTab()}
            {activeTab === 'notifications' && renderNotificationsTab()}
            {activeTab === 'preferences' && renderPreferencesTab()}
            {activeTab === 'privacy' && renderPrivacyTab()}
            {activeTab === 'about' && renderAboutTab()}
          </div>
        </div>

        <div className="settings-footer">
          <button className="reset-btn" onClick={handleReset}>
            üîÑ ƒê·∫∑t l·∫°i
          </button>
          <button className="save-btn" onClick={handleSave}>
            üíæ L∆∞u thay ƒë·ªïi
          </button>
        </div>
      </div>
    </div>
  );
};

export default Settings;
